services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: franchise_nequi
      POSTGRES_USER: franchise_user
      POSTGRES_PASSWORD: franchise1234**
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - spring-postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U franchise_user -d franchise_nequi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  franchise-management-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: franchise-management-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: franchise_nequi
      DB_USERNAME: franchise_user
      DB_PASSWORD: franchise1234**
      SERVER_PORT: 8080
      LOG_LEVEL: INFO
      CORS_ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:4200"
      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -Dspring.profiles.active=docker"
    ports:
      - "8080:8080"
    networks:
      - spring-postgres-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - spring-postgres-network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  spring-postgres-network:
    driver: bridge